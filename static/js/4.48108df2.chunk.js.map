{"version":3,"sources":["Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","TabContent","useEffect","스위치변경","누른탭","Alert","className","Info","재고","id","connect","state","reducer","alert열렸니","reducer2","useContext","재고context","useState","myalert2","myalert2변경","누른탭변경","스위치","타이머","setTimeout","console","log","clearTimeout","useParams","찾은상품","shoes","find","상품","history","useHistory","arr","localStorage","getItem","JSON","parse","push","Set","setItem","stringify","src","width","title","content","price","onClick","index","copynew","재고변경","copy","dispatch","type","데이터","name","quan","goBack","variant","defaultActiveKey","Item","Link","enentKey","eventKey","in","classNames","timeout"],"mappings":"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","file":"static/js/4.48108df2.chunk.js","sourcesContent":["import React, {useEffect, useState, useContext} from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport './Detail.scss';\r\nimport {재고context} from './App.js';\r\n\r\nimport { CSSTransition} from \"react-transition-group\";\r\nimport { connect } from 'react-redux';\r\n\r\nlet 박스 = styled.div`\r\n  padding : 20px;\r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n  font-size : 25px;\r\n  color : ${ props => props.색상 }\r\n`;\r\n\r\n// class Detail2 extends React.Component{\r\n//   componentDidMount(){\r\n\r\n//   }\r\n//   componentWillUnmount(){\r\n\r\n//   }\r\n// }\r\n\r\nfunction Detail(props){\r\n\r\n    \r\n\r\n    let 재고 = useContext(재고context);\r\n\r\n    let[myalert2, myalert2변경] = useState(true);\r\n    let [입력값, 입력값변경] = useState('');\r\n\r\n    let[누른탭, 누른탭변경] = useState(0);\r\n    let [스위치, 스위치변경] = useState(false);\r\n    \r\n    useEffect(()=>{\r\n      let 타이머 = setTimeout(()=>{myalert2변경(false)}, 2000)\r\n      console.log('안녕'); //재 랜더링 되는지 확인\r\n      return ()=>{ clearTimeout(타이머)} \r\n    },[]);\r\n\r\n    \r\n\r\n\r\n    let { id } = useParams(); // url을 파라미터로 만듬(변수로)\r\n    let 찾은상품 = props.shoes.find(function(상품){\r\n      return 상품.id == id\r\n    })\r\n\r\n    let history =useHistory();\r\n\r\n    useEffect(()=>{\r\n      var arr = localStorage.getItem('watched');\r\n      if(arr== null){\r\n        arr=[]\r\n      } \r\n      else{\r\n        arr = JSON.parse(arr)} //arr 가 null이면 빈 arr만들고 있으면 그대로 쓴다\r\n\r\n      //arr가 undefined arr가 array가 아니라서 -> null이라서\r\n      arr.push(id); //id = url, 자바 스크립트 set 자료형 씀 -> 중복 ㄴㄴ\r\n      arr = new Set(arr); // \"[]\"로 나오면\r\n      arr = [...arr]; // []로 \"\"벗겨주세요\r\n\r\n      localStorage.setItem('watched', JSON.stringify(arr))\r\n\r\n    },[])\r\n\r\n    /*function 재고감소(){\r\n      let newStock = [...props.재고];\r\n      newStock[0]--;\r\n      props.재고변경(newStock);\r\n      }*/\r\n      function copy() {\r\n        let index = id ;\r\n        let copynew = [...props.재고];\r\n        copynew[index]--;\r\n        return props.재고변경(copynew);\r\n      }\r\n    return(\r\n      <div className=\"container\">\r\n        <박스>\r\n          <제목 className=\"red\">Detail</제목>\r\n        </박스>\r\n        {/* <div className=\"my-alert2\">\r\n          <p>재고가 얼마 남지 않았습니다</p>\r\n        </div> */}\r\n        \r\n        {/* { 입력값 }\r\n        <input onChange={(e)=>{입력값변경(e.target.value)}} /> */}\r\n        \r\n        \r\n        {\r\n          myalert2 === true\r\n          ? <Alert 스위치변경={스위치변경}/>\r\n          : null\r\n        }\r\n\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img src={'https://codingapple1.github.io/shop/shoes' + (찾은상품.id+1) + '.jpg'} width=\"100%\" />\r\n        </div>\r\n        <div className=\"col-md-6 mt-4\">\r\n          <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n          <p>{찾은상품.content}</p>\r\n          <p>{찾은상품.price}</p>\r\n\r\n          \r\n          <Info 재고 = { props.재고 } id = {id} />\r\n\r\n          <button className=\"btn btn-primary\" onClick={()=>{\r\n            /*재고감소()*/\r\n            copy()\r\n             props.dispatch({type : '항목추가', 데이터 : { id : 찾은상품.id, name : 찾은상품.title , quan: 1 }});\r\n             history.push('/cart'); //페이지 이동을 강제로 해준다 \r\n             } } >장바구니에 담기</button> \r\n          <button className=\"btn btn-secondary\" onClick={()=>{ history.goBack(); } } >뒤로가기 </button> \r\n        </div>\r\n      </div>\r\n      \r\n      \r\n      <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n        <Nav.Item>\r\n          <Nav.Link enentKey=\"link-0\" onClick={()=>{스위치변경(false); 누른탭변경(0)}}>상품정보</Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"link-1\"onClick={()=>{스위치변경(false); 누른탭변경(1)}}>배송관련</Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"link-2\"onClick={()=>{스위치변경(false); 누른탭변경(2)}}>환불약관</Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      <CSSTransition in={스위치} classNames=\"wow\" timeout={500}>\r\n      <TabContent 누른탭={누른탭} 스위치변경={스위치변경}></TabContent>\r\n      </CSSTransition>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\nfunction TabContent(props){\r\n\r\n  useEffect(()=>{\r\n    props.스위치변경(true);\r\n  });\r\n\r\n  if(props.누른탭 === 0){\r\n    return(\r\n      <div>\r\n        <div>메이커는 ???입니다</div>\r\n        <div>사이즈는 ???입니다</div>\r\n        <div>색상은 ???입니다</div>\r\n      </div>\r\n      \r\n    ) \r\n  }\r\n  else if(props.누른탭 === 1){\r\n    return <div>배송은 ~~식으로 진행됩니다</div>\r\n  }\r\n  else if(props.누른탭 === 2){\r\n    return <div>환불약관은 ~~식임으로 참고하시면 되겠습니다</div>\r\n  }   \r\n\r\n}\r\n\r\nfunction Alert(props){\r\n\r\n    useEffect(()=>{\r\n      props.스위치변경(true);\r\n    });\r\n\r\n    return(\r\n    <div className=\"my-alert2\">\r\n      <p>재고가 얼마 남지 않았습니다</p>\r\n    </div>\r\n    )\r\n }\r\n\r\n /*function Show(props){\r\n  let history = useHistory(); \r\n  console.log(props.shoes); \r\n  return (\r\n    <div className='show'>\r\n      <h3>최근 본 상품</h3> \r\n      {\r\n        props.arr.map((value)=>{ \r\n          return (\r\n            <div className = 'show-product'>\r\n              <p onClick={\r\n                ()=>{\r\n                  history.push('/detail/${value}');\r\n                }\r\n              }>{value} 번째 상품</p>\r\n            </div>\r\n          )\r\n        })\r\n        <Show shoes={props.shoes} ->여긴 Detail.js 위에\r\n            arr={JSON.parse(localStorage.getItem('watched'))==null?[]:JSON.parse(localStorage.getItem('watched')) }>\r\n          </Show>\r\n      }\r\n    </div>\r\n  )\r\n}*/\r\n\r\n/*function Info(props){\r\n  return(\r\n    <p>재고 : {props.재고[0]}</p>\r\n  )\r\n}*/\r\nfunction Info(props) {\r\n  return (\r\n    <p>재고 : {props.재고[props.id]} </p>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nfunction state를props화(state) {\r\n  return {\r\n      // 상품명 : state[0].name\r\n      state : state.reducer, // store 안에 있던 모든 데이터 state 라는 이름의 props로 바꿔주셈\r\n      alert열렸니 : state.reducer2\r\n  \r\n  }\r\n}\r\n\r\nexport default connect(state를props화)(Detail);"],"sourceRoot":""}